/**
    Marc Liyanage Xcode text macro specifications

    http://github.com/liyanage/xcode-text-macros/
*/

(
    {
        Identifier = objc.stringliteral;
        BasedOn = objc;
        IsMenuItem = YES;
        Name = "String Literal";
        TextString = "@\"<#!string!#>\"";
        OnlyAtBOL = NO;
    },
    {
        Identifier = objc.property.declaration;
        BasedOn = objc;
		IncludeContexts = ( "xcode.lang.objcpp.interface", xcode.lang.objc.interface );
	},
    {
        Identifier = objc.property.declaration.retain;
        BasedOn = objc.property.declaration;
        IsMenuItem = YES;
        Name = "@property Declaration - retain";
        TextString = "@property (retain) <#!type and name!#>;";
        CompletionPrefix = "@pr";
		CycleList = (
			objc.property.declaration.retain,
			objc.property.declaration.assign,
			objc.property.declaration.copy,
		);
        OnlyAtBOL = YES;
    },
    {
        Identifier = objc.property.declaration.assign;
        BasedOn = objc.property.declaration;
        IsMenuItem = YES;
        Name = "@property Declaration - assign";
        TextString = "@property (assign) <#!type and name!#>;";
        CompletionPrefix = "@pra";
        OnlyAtBOL = YES;
    },
    {
        Identifier = objc.property.declaration.copy;
        BasedOn = objc.property.declaration;
        IsMenuItem = YES;
        Name = "@property Declaration - copy";
        TextString = "@property (copy) <#!type and name!#>;";
        CompletionPrefix = "@prc";
        OnlyAtBOL = YES;
    },
    {
        Identifier = objc.property.synthesize;
        BasedOn = objc;
        IsMenuItem = YES;
        Name = "@synthesize Property";
        TextString = "@synthesize <#!name!#>;";
        CompletionPrefix = "@syn";
		CycleList = (
			objc.property.synthesize,
			objc.property.synthesize.ivar,
		);
        OnlyAtBOL = YES;
		IncludeContexts = ( "xcode.lang.objc.implementation" );
		ExcludeContexts = ( "xcode.lang.objc.block" );
    },
    {
        Identifier = objc.property.synthesize.ivar;
        BasedOn = objc.property.synthesize;
        IsMenuItem = YES;
        Name = "@synthesize Property, assign ivar";
        TextString = "@synthesize <#!name!#> = <#ivar#>;";
        CompletionPrefix = "@syni";
        OnlyAtBOL = YES;
    },
    {
        Identifier = objc.log.0arg;
        BasedOn = objc;
        IsMenuItem = YES;
        Name = "NSLog() Call";
        TextString = "NSLog$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)@\"<#!message!#>\"$(InFunctionArgsSpacing));";
        CompletionPrefix = log;
        OnlyAtBOL = YES;
        IncludeContexts = ( "xcode.lang.objc.block" );
		CycleList = (
			objc.log.0arg,
			objc.log.1arg,
		);
    },
    {
        Identifier = objc.log.1arg;
        BasedOn = objc;
        IsMenuItem = YES;
        Name = "NSLog() Call 1 Argument";
        TextString = "NSLog$(PreFunctionArgsSpacing)($(InFunctionArgsSpacing)@\"<#message#> %@\", <#!argument!#>$(InFunctionArgsSpacing));";
        CompletionPrefix = log1;
        OnlyAtBOL = YES;
        IncludeContexts = ( "xcode.lang.objc.block" );
    },
    {
        Identifier = c.block.if.singlestatement;
        BasedOn = c.block.if;
        Name = "If Block Single Statement";
        IsMenuItem = YES;
        OnlyAtBOL = YES;
        CompletionPrefix = if1;
        CycleList = (
            c.block.if.singlestatement,
            c.block.if,
            c.block.ifelse,
        );
        TextString = "$(Statement)$(BlockSeparator)\n\t<#!statement!#>;\n";
    },
    {
        Identifier = objc.method;
        Name = "Method Definition";
        IsMenuItem = NO;
        BasedOn = objc;
        OnlyAtBOL = YES;
		TextString = "$(Declaration)$(BlockSeparator)\n{\n\t<#!statements!#>\n}";
		IncludeContexts = ( "xcode.lang.objc.implementation" );
		ExcludeContexts = ( "xcode.lang.objc.block" );
},
    {
        Identifier = objc.method.void;
        Name = "Method Definition - void no Parameters";
        IsMenuItem = YES;
        BasedOn = objc.method;
        Declaration = "- (<#return type#>)<#method name#>";
        CompletionPrefix = mev;
        CycleList = (
        	objc.method.void,
			objc.method.generic,
			objc.method.nsstring,
        );
        OnlyAtBOL = YES;
    },
    {
        Identifier = objc.method.generic;
        Name = "Method Definition - Generic Method";
        IsMenuItem = YES;
        BasedOn = objc.method;
        Declaration = "- (<#return type#>)<#method name#>:(<#parameter type 1#>)<#parameter name 1#>";
        CompletionPrefix = me;
        OnlyAtBOL = YES;
    },
    {
        Identifier = objc.method.nsstring;
        Name = "Method Definition - NSString Return Value";
        IsMenuItem = YES;
        BasedOn = objc.method;
        CompletionPrefix = mes;
        Declaration = "- (NSString *)<#method name#>";
        OnlyAtBOL = YES;
    },
    {
        Identifier = objc.method.parameter;
        Name = "Method Parameter";
        IsMenuItem = YES;
        BasedOn = objc.method;
        TextString = "<#description#>:(<#type#>)<#name#>";
        CompletionPrefix = para;
        OnlyAtBOL = YES;
    },
    {
        Identifier = objc.string.format;
        Name = "NSString With Format";
        IsMenuItem = YES;
        BasedOn = objc;
        CompletionPrefix = sf;
        TextString = "[NSString stringWithFormat:@\"<#!format!#>\", <#arguments#>]";
        OnlyAtBOL = NO;
    },
    
)

